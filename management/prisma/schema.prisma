generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String    @id @default(cuid())
  name      String    @unique
  domain    String?   @unique
  isBlocked Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
  sessions  Session[]
  users     User[]

  @@map("tenants")
}

model User {
  id        String    @id @default(cuid())
  email     String
  username  String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isBlocked Boolean   @default(false)
  role      UserRole  @default(USER)
  tenantId  String?
  projects  Project[]
  sessions  Session[]
  tenant    Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([email, tenantId])
  @@unique([username, tenantId])
  @@map("users")
}

model Project {
  id             String    @id @default(cuid())
  name           String
  description    String?
  userId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  collectionName String
  tenantId       String
  tenant         Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions       Session[]
  videos         Video[]

  @@unique([name, tenantId])
  @@unique([collectionName, tenantId])
  @@map("projects")
}

model Video {
  id               String           @id @default(cuid())
  filename         String
  originalName     String
  description      String
  filePath         String
  audioPath        String?
  transcription    String?
  transcriptionData String?         // JSON data with timestamps
  tutorialSteps    String?
  processingStatus ProcessingStatus @default(UPLOADED)
  projectId        String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  project          Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("videos")
}

model Session {
  id                String        @id @default(cuid())
  sessionId         String        @unique
  userId            String
  projectId         String
  tenantId          String
  startTime         DateTime      @default(now())
  endTime           DateTime?
  durationSeconds   Int?
  inputTokens       Int           @default(0)
  outputTokens      Int           @default(0)
  totalTokens       Int           @default(0)
  textInputTokens   Int           @default(0)
  audioInputTokens  Int           @default(0)
  videoInputTokens  Int           @default(0)
  audioOutputTokens Int           @default(0)
  textOutputTokens  Int           @default(0)
  status            SessionStatus @default(ACTIVE)
  errorMessage      String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  project           Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum ProcessingStatus {
  UPLOADED
  EXTRACTING_AUDIO
  TRANSCRIBING
  GENERATING_STEPS
  EMBEDDING
  COMPLETED
  FAILED
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  TERMINATED
  ERROR
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}
